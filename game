// Definição de variáveis globais
var player;
var enemies;
var bullets;
var cursors;
var score = 0;
var scoreText;
var lives = 3;
var livesText;
var gameOver = false;
var gameOverText;

// Configuração do jogo usando Phaser.js
var config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 0 },
            debug: false
        }
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};

// Inicialização do jogo
var game = new Phaser.Game(config);

// Função de pré-carregamento de recursos
function preload() {
    this.load.image('ship', 'assets/ship.png');
    this.load.image('bullet', 'assets/bullet.png');
    this.load.image('enemy', 'assets/enemy.png');
    this.load.image('background', 'assets/background.png');
}

// Função de criação inicial do jogo
function create() {
    // Background
    this.add.image(400, 300, 'background').setScale(1.2);

    // Player
    player = this.physics.add.sprite(400, 500, 'ship').setScale(0.5);

    // Enemies
    enemies = this.physics.add.group();
    this.time.addEvent({ delay: 1000, callback: createEnemy, callbackScope: this, loop: true });

    // Bullets
    bullets = this.physics.add.group();

    // Input
    cursors = this.input.keyboard.createCursorKeys();
    this.input.keyboard.on('keydown-SPACE', fireBullet, this);

    // Texts
    scoreText = this.add.text(16, 16, 'Score: 0', { fontSize: '32px', fill: '#fff' });
    livesText = this.add.text(600, 16, 'Lives: 3', { fontSize: '32px', fill: '#fff' });
    gameOverText = this.add.text(200, 250, 'GAME OVER', { fontSize: '64px', fill: '#ff0000' });
    gameOverText.visible = false;

    // Collisions
    this.physics.add.collider(enemies, bullets, enemyHit, null, this);
    this.physics.add.collider(player, enemies, playerHit, null, this);
}

// Função de atualização do jogo
function update() {
    if (gameOver) {
        return;
    }

    if (cursors.left.isDown && player.x > 50) {
        player.setVelocityX(-300);
    } else if (cursors.right.isDown && player.x < 750) {
        player.setVelocityX(300);
    } else {
        player.setVelocityX(0);
    }
}

// Função para criar inimigos
function createEnemy() {
    var enemy = enemies.create(Phaser.Math.Between(50, 750), 0, 'enemy');
    enemy.setVelocity(0, Phaser.Math.Between(100, 300));
}

// Função para disparar balas
function fireBullet() {
    var bullet = bullets.create(player.x, player.y - 30, 'bullet');
    bullet.setVelocity(0, -600);
}

// Função para lidar com colisão entre bala e inimigo
function enemyHit(bullet, enemy) {
    bullet.destroy();
    enemy.destroy();
    
    score += 10;
    scoreText.setText('Score: ' + score);
}

// Função para lidar com colisão entre jogador e inimigo
function playerHit(player, enemy) {
    enemy.destroy();
    lives--;

    if (lives > 0) {
        livesText.setText('Lives: ' + lives);
    } else {
        gameOver = true;
        gameOverText.visible = true;
        player.setTint(0xff0000);
        player.disableBody(true, true);
    }
}
